// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: myhomepage/myhomepage.proto

package myhomepage

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMyhomepageGetMyInfo = "/api.myhomepage.Myhomepage/GetMyInfo"
const OperationMyhomepageGetMyName = "/api.myhomepage.Myhomepage/GetMyName"
const OperationMyhomepageSetMyInfo = "/api.myhomepage.Myhomepage/SetMyInfo"

type MyhomepageHTTPServer interface {
	GetMyInfo(context.Context, *GetMyInfoRequest) (*GetMyInfoReply, error)
	GetMyName(context.Context, *GetMyNameRequest) (*GetMyNameReply, error)
	SetMyInfo(context.Context, *SetMyInfoRequest) (*SetMyInfoReply, error)
}

func RegisterMyhomepageHTTPServer(s *http.Server, srv MyhomepageHTTPServer) {
	r := s.Route("/")
	r.GET("/myhomepage/name/{account_name}", _Myhomepage_GetMyName0_HTTP_Handler(srv))
	r.GET("/myhomepage/info", _Myhomepage_GetMyInfo0_HTTP_Handler(srv))
	r.POST("/myhomepage/info", _Myhomepage_SetMyInfo0_HTTP_Handler(srv))
}

func _Myhomepage_GetMyName0_HTTP_Handler(srv MyhomepageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMyNameRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyhomepageGetMyName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMyName(ctx, req.(*GetMyNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMyNameReply)
		return ctx.Result(200, reply)
	}
}

func _Myhomepage_GetMyInfo0_HTTP_Handler(srv MyhomepageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMyInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyhomepageGetMyInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMyInfo(ctx, req.(*GetMyInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMyInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Myhomepage_SetMyInfo0_HTTP_Handler(srv MyhomepageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetMyInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyhomepageSetMyInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetMyInfo(ctx, req.(*SetMyInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetMyInfoReply)
		return ctx.Result(200, reply)
	}
}

type MyhomepageHTTPClient interface {
	GetMyInfo(ctx context.Context, req *GetMyInfoRequest, opts ...http.CallOption) (rsp *GetMyInfoReply, err error)
	GetMyName(ctx context.Context, req *GetMyNameRequest, opts ...http.CallOption) (rsp *GetMyNameReply, err error)
	SetMyInfo(ctx context.Context, req *SetMyInfoRequest, opts ...http.CallOption) (rsp *SetMyInfoReply, err error)
}

type MyhomepageHTTPClientImpl struct {
	cc *http.Client
}

func NewMyhomepageHTTPClient(client *http.Client) MyhomepageHTTPClient {
	return &MyhomepageHTTPClientImpl{client}
}

func (c *MyhomepageHTTPClientImpl) GetMyInfo(ctx context.Context, in *GetMyInfoRequest, opts ...http.CallOption) (*GetMyInfoReply, error) {
	var out GetMyInfoReply
	pattern := "/myhomepage/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMyhomepageGetMyInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MyhomepageHTTPClientImpl) GetMyName(ctx context.Context, in *GetMyNameRequest, opts ...http.CallOption) (*GetMyNameReply, error) {
	var out GetMyNameReply
	pattern := "/myhomepage/name/{account_name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMyhomepageGetMyName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MyhomepageHTTPClientImpl) SetMyInfo(ctx context.Context, in *SetMyInfoRequest, opts ...http.CallOption) (*SetMyInfoReply, error) {
	var out SetMyInfoReply
	pattern := "/myhomepage/info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMyhomepageSetMyInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
