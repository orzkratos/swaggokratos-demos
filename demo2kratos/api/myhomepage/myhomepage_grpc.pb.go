// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: myhomepage/myhomepage.proto

package myhomepage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Myhomepage_GetMyName_FullMethodName = "/api.myhomepage.Myhomepage/GetMyName"
	Myhomepage_GetMyInfo_FullMethodName = "/api.myhomepage.Myhomepage/GetMyInfo"
	Myhomepage_SetMyInfo_FullMethodName = "/api.myhomepage.Myhomepage/SetMyInfo"
)

// MyhomepageClient is the client API for Myhomepage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyhomepageClient interface {
	GetMyName(ctx context.Context, in *GetMyNameRequest, opts ...grpc.CallOption) (*GetMyNameReply, error)
	GetMyInfo(ctx context.Context, in *GetMyInfoRequest, opts ...grpc.CallOption) (*GetMyInfoReply, error)
	SetMyInfo(ctx context.Context, in *SetMyInfoRequest, opts ...grpc.CallOption) (*SetMyInfoReply, error)
}

type myhomepageClient struct {
	cc grpc.ClientConnInterface
}

func NewMyhomepageClient(cc grpc.ClientConnInterface) MyhomepageClient {
	return &myhomepageClient{cc}
}

func (c *myhomepageClient) GetMyName(ctx context.Context, in *GetMyNameRequest, opts ...grpc.CallOption) (*GetMyNameReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyNameReply)
	err := c.cc.Invoke(ctx, Myhomepage_GetMyName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myhomepageClient) GetMyInfo(ctx context.Context, in *GetMyInfoRequest, opts ...grpc.CallOption) (*GetMyInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyInfoReply)
	err := c.cc.Invoke(ctx, Myhomepage_GetMyInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myhomepageClient) SetMyInfo(ctx context.Context, in *SetMyInfoRequest, opts ...grpc.CallOption) (*SetMyInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMyInfoReply)
	err := c.cc.Invoke(ctx, Myhomepage_SetMyInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyhomepageServer is the server API for Myhomepage service.
// All implementations must embed UnimplementedMyhomepageServer
// for forward compatibility.
type MyhomepageServer interface {
	GetMyName(context.Context, *GetMyNameRequest) (*GetMyNameReply, error)
	GetMyInfo(context.Context, *GetMyInfoRequest) (*GetMyInfoReply, error)
	SetMyInfo(context.Context, *SetMyInfoRequest) (*SetMyInfoReply, error)
	mustEmbedUnimplementedMyhomepageServer()
}

// UnimplementedMyhomepageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMyhomepageServer struct{}

func (UnimplementedMyhomepageServer) GetMyName(context.Context, *GetMyNameRequest) (*GetMyNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyName not implemented")
}
func (UnimplementedMyhomepageServer) GetMyInfo(context.Context, *GetMyInfoRequest) (*GetMyInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyInfo not implemented")
}
func (UnimplementedMyhomepageServer) SetMyInfo(context.Context, *SetMyInfoRequest) (*SetMyInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyInfo not implemented")
}
func (UnimplementedMyhomepageServer) mustEmbedUnimplementedMyhomepageServer() {}
func (UnimplementedMyhomepageServer) testEmbeddedByValue()                    {}

// UnsafeMyhomepageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyhomepageServer will
// result in compilation errors.
type UnsafeMyhomepageServer interface {
	mustEmbedUnimplementedMyhomepageServer()
}

func RegisterMyhomepageServer(s grpc.ServiceRegistrar, srv MyhomepageServer) {
	// If the following call pancis, it indicates UnimplementedMyhomepageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Myhomepage_ServiceDesc, srv)
}

func _Myhomepage_GetMyName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyhomepageServer).GetMyName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Myhomepage_GetMyName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyhomepageServer).GetMyName(ctx, req.(*GetMyNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Myhomepage_GetMyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyhomepageServer).GetMyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Myhomepage_GetMyInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyhomepageServer).GetMyInfo(ctx, req.(*GetMyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Myhomepage_SetMyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyhomepageServer).SetMyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Myhomepage_SetMyInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyhomepageServer).SetMyInfo(ctx, req.(*SetMyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Myhomepage_ServiceDesc is the grpc.ServiceDesc for Myhomepage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Myhomepage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.myhomepage.Myhomepage",
	HandlerType: (*MyhomepageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMyName",
			Handler:    _Myhomepage_GetMyName_Handler,
		},
		{
			MethodName: "GetMyInfo",
			Handler:    _Myhomepage_GetMyInfo_Handler,
		},
		{
			MethodName: "SetMyInfo",
			Handler:    _Myhomepage_SetMyInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "myhomepage/myhomepage.proto",
}
